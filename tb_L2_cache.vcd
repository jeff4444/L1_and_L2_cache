$date
	Mon May  5 10:44:14 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_L2_cache $end
$var wire 1 ! mem_write $end
$var wire 1 " mem_read $end
$var wire 512 # mem_data_out [511:0] $end
$var wire 32 $ mem_addr [31:0] $end
$var wire 1 % l2_hit $end
$var wire 1 & l2_cache_ready $end
$var wire 512 ' l2_cache_data_out [511:0] $end
$var parameter 32 ( ADDR_WIDTH $end
$var parameter 32 ) BLOCK_SIZE $end
$var parameter 32 * CACHE_SIZE $end
$var parameter 32 + DATA_WIDTH $end
$var parameter 32 , L1_BLOCK_SIZE $end
$var parameter 32 - NUM_WAYS $end
$var reg 1 . clk $end
$var reg 32 / l2_cache_addr [31:0] $end
$var reg 512 0 l2_cache_data_in [511:0] $end
$var reg 1 1 l2_cache_read $end
$var reg 1 2 l2_cache_write $end
$var reg 512 3 mem_data_in [511:0] $end
$var reg 1 4 mem_hit $end
$var reg 1 5 mem_ready $end
$var reg 1 6 rst_n $end
$scope module dut $end
$var wire 1 . clk $end
$var wire 32 7 l2_cache_addr [31:0] $end
$var wire 512 8 l2_cache_data_in [511:0] $end
$var wire 1 1 l2_cache_read $end
$var wire 1 2 l2_cache_write $end
$var wire 1 % l2_hit $end
$var wire 512 9 mem_data_in [511:0] $end
$var wire 1 4 mem_hit $end
$var wire 1 5 mem_ready $end
$var wire 1 6 rst_n $end
$var wire 24 : tag [23:0] $end
$var wire 4 ; index [3:0] $end
$var parameter 32 < ADDR_WIDTH $end
$var parameter 2 = ALLOCATE $end
$var parameter 32 > BLOCK_SIZE $end
$var parameter 32 ? BYTE_OFFSET_WIDTH $end
$var parameter 32 @ CACHE_SIZE $end
$var parameter 2 A COMPARE_TAG $end
$var parameter 32 B DATA_WIDTH $end
$var parameter 2 C IDLE $end
$var parameter 32 D INDEX_WIDTH $end
$var parameter 32 E L1_BLOCK_SIZE $end
$var parameter 32 F NUM_BLOCKS $end
$var parameter 32 G NUM_SETS $end
$var parameter 32 H NUM_WAYS $end
$var parameter 34 I TAG_WIDTH $end
$var reg 2 J alloc_way [1:0] $end
$var reg 4 K delay_cnt [3:0] $end
$var reg 1 L hit $end
$var reg 2 M hit_way [1:0] $end
$var reg 512 N l2_cache_data_out [511:0] $end
$var reg 1 & l2_cache_ready $end
$var reg 32 O mem_addr [31:0] $end
$var reg 512 P mem_data_out [511:0] $end
$var reg 1 " mem_read $end
$var reg 1 ! mem_write $end
$var reg 2 Q next_state [1:0] $end
$var reg 2 R state [1:0] $end
$var integer 32 S i [31:0] $end
$var integer 32 T j [31:0] $end
$upscope $end
$scope task fill_data_block $end
$var reg 32 U base [31:0] $end
$var reg 512 V block [511:0] $end
$var integer 32 W j [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b11000 I
b100 H
b10000 G
b1000000 F
b10000 E
b100 D
b0 C
b100000 B
b1 A
b10000000000 @
b100 ?
b10000 >
b10 =
b100000 <
b100 -
b10000 ,
b100000 +
b10000000000 *
b10000 )
b100000 (
$end
#0
$dumpvars
bx W
bx V
bx U
b100 T
b100 S
b0 R
b0 Q
b0 P
b0 O
b0 N
b0 M
0L
b0 K
b11 J
b0 ;
b0 :
bx 9
bx 8
b0 7
06
05
04
bx 3
02
01
bx 0
b0 /
0.
b0 '
0&
0%
b0 $
b0 #
0"
0!
$end
#5000
b100 T
b10000 S
1.
#10000
1%
0.
14
15
b1000000001111000000000000000000010000000011100000000000000000000100000000110100000000000000000001000000001100000000000000000000010000000010110000000000000000000100000000101000000000000000000001000000001001000000000000000000010000000010000000000000000000000100000000011100000000000000000001000000000110000000000000000000010000000001010000000000000000000100000000010000000000000000000001000000000011000000000000000000010000000000100000000000000000000100000000000100000000000000000001000000000000 3
b1000000001111000000000000000000010000000011100000000000000000000100000000110100000000000000000001000000001100000000000000000000010000000010110000000000000000000100000000101000000000000000000001000000001001000000000000000000010000000010000000000000000000000100000000011100000000000000000001000000000110000000000000000000010000000001010000000000000000000100000000010000000000000000000001000000000011000000000000000000010000000000100000000000000000000100000000000100000000000000000001000000000000 9
b1000000001111000000000000000000010000000011100000000000000000000100000000110100000000000000000001000000001100000000000000000000010000000010110000000000000000000100000000101000000000000000000001000000001001000000000000000000010000000010000000000000000000000100000000011100000000000000000001000000000110000000000000000000010000000001010000000000000000000100000000010000000000000000000001000000000011000000000000000000010000000000100000000000000000000100000000000100000000000000000001000000000000 V
b10000 W
b1000000000000 U
16
#15000
b100 K
1.
#20000
b11 J
b100 S
b1 Q
b100 ;
0.
11
b1000000 /
b1000000 7
#25000
b1 R
1.
#30000
0.
01
#35000
b11 K
1.
#40000
0.
#45000
b10 K
1.
#50000
0.
#55000
b1 K
1.
#60000
0.
#65000
b10 Q
b0 K
1.
#70000
0.
#75000
b0 Q
b10 R
1"
b1000000 $
b1000000 O
1.
#80000
0.
#85000
b10 J
b11 M
1L
0"
1&
b1000000001111000000000000000000010000000011100000000000000000000100000000110100000000000000000001000000001100000000000000000000010000000010110000000000000000000100000000101000000000000000000001000000001001000000000000000000010000000010000000000000000000000100000000011100000000000000000001000000000110000000000000000000010000000001010000000000000000000100000000010000000000000000000001000000000011000000000000000000010000000000100000000000000000000100000000000100000000000000000001000000000000 '
b1000000001111000000000000000000010000000011100000000000000000000100000000110100000000000000000001000000001100000000000000000000010000000010110000000000000000000100000000101000000000000000000001000000001001000000000000000000010000000010000000000000000000000100000000011100000000000000000001000000000110000000000000000000010000000001010000000000000000000100000000010000000000000000000001000000000011000000000000000000010000000000100000000000000000000100000000000100000000000000000001000000000000 N
b0 R
b100 S
1.
#90000
0.
#95000
b100 K
0&
1.
#100000
0.
#105000
b1 R
b1 Q
1.
11
#110000
0.
#115000
b11 K
1.
01
#120000
0.
#125000
b10 K
1.
#130000
0.
#135000
b1 K
1.
#140000
0.
#145000
b0 Q
b0 K
1.
#150000
0.
#155000
b0 R
1&
b10000 S
1.
#160000
0.
#165000
b100 K
0&
1.
#170000
0.
#175000
1.
#180000
0.
#185000
1.
#190000
0.
#195000
1.
