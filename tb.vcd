$date
	Mon May  5 01:02:09 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb_L2_cache $end
$var wire 1 ! mem_write $end
$var wire 1 " mem_read $end
$var wire 32 # mem_data_out_flat [31:0] $end
$var wire 4 $ mem_addr [3:0] $end
$var wire 1 % l1_valid $end
$var wire 1 & l1_ready $end
$var wire 1 ' l1_hit $end
$var wire 32 ( l1_data_out_flat [31:0] $end
$var parameter 32 ) ADDR_WIDTH $end
$var parameter 32 * BLOCK_SIZE $end
$var parameter 32 + DATA_WIDTH $end
$var parameter 64 , FLAT_WIDTH $end
$var reg 1 - clk $end
$var reg 4 . l1_addr [3:0] $end
$var reg 32 / l1_data_in_flat [31:0] $end
$var reg 1 0 l1_read $end
$var reg 1 1 l1_write $end
$var reg 32 2 mem_data_block_flat [31:0] $end
$var reg 1 3 mem_ready $end
$var reg 1 4 rst_n $end
$scope module dut $end
$var wire 1 - clk $end
$var wire 4 5 l1_cache_addr [3:0] $end
$var wire 32 6 l1_cache_data_in [31:0] $end
$var wire 1 0 l1_cache_read $end
$var wire 1 1 l1_cache_write $end
$var wire 32 7 mem_data_block [31:0] $end
$var wire 1 3 mem_ready $end
$var wire 1 4 rst_n $end
$var wire 1 8 tag $end
$var wire 1 9 index $end
$var parameter 32 : ADDR_WIDTH $end
$var parameter 32 ; BLOCK_SIZE $end
$var parameter 32 < CACHE_SIZE $end
$var parameter 32 = DATA_WIDTH $end
$var parameter 2 > IDLE $end
$var parameter 32 ? NUM_WAYS $end
$var parameter 2 @ TAG_CHECK $end
$var parameter 2 A WRITE_ALLOCATE $end
$var parameter 32 B block_num $end
$var parameter 32 C index_width $end
$var parameter 32 D offset_width $end
$var parameter 32 E set_num $end
$var parameter 34 F tag_width $end
$var reg 2 G curr_state [1:0] $end
$var reg 1 H hit $end
$var reg 1 I hit_way $end
$var reg 32 J l1_block_data_out [31:0] $end
$var reg 1 % l1_block_valid $end
$var reg 1 ' l1_cache_hit $end
$var reg 1 & l1_cache_ready $end
$var reg 4 K mem_addr [3:0] $end
$var reg 32 L mem_data_out [31:0] $end
$var reg 1 " mem_read $end
$var reg 1 ! mem_write $end
$var reg 2 M next_state [1:0] $end
$var integer 32 N ii [31:0] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 O w [31:0] $end
$upscope $end
$scope begin $unm_blk_17 $end
$var reg 1 P alloc_way $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1 F
b10 E
b10 D
b1 C
b100 B
b11 A
b1 @
b10 ?
b0 >
b1000 =
b10000 <
b100 ;
b100 :
b100000 ,
b1000 +
b100 *
b100 )
$end
#0
$dumpvars
xP
b10 O
b10 N
b0 M
b0 L
b0 K
b0 J
0I
0H
b0 G
x9
x8
bx 7
bx 6
bx 5
04
03
bx 2
01
00
bx /
bx .
0-
b0 (
0'
0&
0%
b0 $
b0 #
0"
0!
$end
#5
b10 O
b10 N
1-
#10
0-
#12
14
#15
b10 N
b1 M
18
09
b11111111111111111111111111111111 2
b11111111111111111111111111111111 7
10
b1010 .
b1010 5
1-
#20
0-
#25
b1 G
b11 M
13
1-
#30
0-
#35
1"
b1000 $
b1000 K
b11 G
b11 M
b10 N
1P
00
03
1-
#40
0-
#45
1"
10
1-
#50
0-
#55
1"
00
1-
#60
0-
#65
1"
11
b10111011101110111011101110111011 /
b10111011101110111011101110111011 6
b1011 .
b1011 5
1-
#70
0-
#75
1"
01
1-
#80
0-
#85
1"
11
b11001100110011001100110011001100 /
b11001100110011001100110011001100 6
1-
#90
0-
#95
1"
01
1-
#100
0-
#105
1"
1-
#110
0-
#115
1"
1-
